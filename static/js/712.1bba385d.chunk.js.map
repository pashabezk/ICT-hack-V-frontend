{"version":3,"file":"static/js/712.1bba385d.chunk.js","mappings":"8NACA,EAAmC,sCAAnC,EAAkF,4B,SCwBlF,EAlBoB,WAEnB,IAAMA,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,IACrBC,GAAQF,EAAAA,EAAAA,IAAYG,EAAAA,IACpBC,GAAWC,EAAAA,EAAAA,MAOjB,OAJIH,IAAUH,GACbK,GAASE,EAAAA,EAAAA,IAAsBJ,KAI/B,gBAAKK,UAAWC,EAAwB,UACvC,SAAC,IAAI,CAACC,IAAI,mDAAWC,KAAK,QAAQH,UAAWC,KAGhD,E,UCsBA,EAnCyB,SAACG,GACzB,OAAO,SAACC,GACP,IAAMb,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,IACrBC,GAAQF,EAAAA,EAAAA,IAAYG,EAAAA,IACpBC,GAAWC,EAAAA,EAAAA,MACXQ,GAAWC,EAAAA,EAAAA,MAAcC,SAASC,MAAM,KAAK,GAGnD,OAAGC,EAAAA,EAAAA,QAAyBf,GAC3BE,GAASc,EAAAA,EAAAA,QACF,SAAC,KAAQ,CAACC,GAAI,YAIlBjB,IAAUH,GACN,SAAC,EAAW,IAMH,UAAbc,EACCd,GACI,SAAC,KAAQ,CAACoB,GAAI,OAEd,SAACR,GAAS,UAAKC,IAIpBb,GACI,SAACY,GAAS,UAAKC,KAChB,SAAC,KAAQ,CAACO,GAAI,UACtB,CACD,C,8IC2DA,WAAeC,EAAAA,EAAAA,IAhGQ,WAItB,IAAMC,GAAYrB,EAAAA,EAAAA,IAAYsB,EAAAA,GACxBC,GAAYvB,EAAAA,EAAAA,IAAYwB,EAAAA,IACxBpB,GAAWC,EAAAA,EAAAA,MAEXoB,EAAQ,yCAAG,WAAOC,GAAM,sEAC7BtB,GAASuB,EAAAA,EAAAA,IAAc,CAACC,MAAOF,EAAOE,MAAOC,SAAUH,EAAOG,YAAY,2CAC1E,gBAFa,sCAWd,OACC,gBAAKC,MAAO,CACXC,QAAS,OACTC,OAAQ,OACRC,UAAW,OACXC,SAAU,EACVC,MAAO,OACPC,OAAQ,QAIP,UACD,UAAC,IAAI,CACJC,SAAU,CACTC,KAAM,GAEPC,WAAY,CACXD,KAAM,IAEPb,SAAUA,EACVe,eA5BoB,SAACC,GACvBrC,GAASsC,EAAAA,EAAAA,IAAaD,EAAUE,YAAY,GAAGC,OAAO,IACvD,EA2BGC,eA1BoB,WACtBzC,GAASsC,EAAAA,EAAAA,IAAa,MACvB,EAyBGI,cAAc,EACdhB,MAAO,CACNiB,cAAe,SACfC,YAAa,OACbb,MAAO,OACPc,SAAU,QACVC,aAAc,QAEb,WACF,SAAC,SAAS,CACTC,MAAM,iCACNC,KAAK,QACLC,MAAO,CACN,CACCC,UAAU,EACVC,QAAS,+HAET,UACF,SAAC,IAAK,OAEP,SAAC,SAAS,CACTJ,MAAM,uCACNC,KAAK,WACLC,MAAO,CACN,CACCC,UAAU,EACVC,QAAS,qIAET,UAEF,SAAC,aAAc,OAEhB,SAAC,SAAS,CACTH,KAAK,WACLI,cAAc,UACdjB,WAAY,CACXD,KAAM,EACNmB,OAAQ,GACP,UAEF,SAAC,IAAQ,iGAEV,SAAC,SAAS,CACTlB,WAAY,CAACkB,OAAQ,GACrBC,eAAgBnC,EAAY,QAAU,UACtCoC,KAAMpC,EAAU,UAChB,SAAC,IAAM,CAACqC,KAAK,UAAUC,SAAS,SAASC,QAASzC,EAAU,kDAOjE,G","sources":["webpack://ict-hack-v-frontend/./src/Components/LoadingPage/LoadingPage.module.css?f1d5","Components/LoadingPage/LoadingPage.jsx","Components/HOC/withAuthRedirect.jsx","Components/Login/Login.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loadingContainer\":\"LoadingPage_loadingContainer__AeygI\",\"loader\":\"LoadingPage_loader__KyCIh\"};","import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getInfoFromTokenAsync, selectToken, selectUserId} from \"../../Redux/AuthReducer\";\r\nimport {Spin} from \"antd\";\r\nimport styles from \"./LoadingPage.module.css\"\r\n\r\n// страница загрузки во время ожидания получения данных о пользователе по токену\r\nconst LoadingPage = () => {\r\n\r\n\tconst userId = useSelector(selectUserId);\r\n\tconst token = useSelector(selectToken);\r\n\tconst dispatch = useDispatch();\r\n\r\n\t// если токен есть (получен из куки), а идентификатора пользователя нет, значит надо подгрузить информацию о пользователе\r\n\tif (token && !userId) {\r\n\t\tdispatch(getInfoFromTokenAsync(token));\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={styles.loadingContainer}>\r\n\t\t\t<Spin tip=\"Загрузка\" size=\"large\" className={styles.loader}/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default LoadingPage;","import React from \"react\";\r\nimport {Navigate, useLocation} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectToken, selectUserId, tryLogOutAsync} from \"../../Redux/AuthReducer\";\r\nimport LoadingPage from \"../LoadingPage/LoadingPage\";\r\nimport {getTokenFromCookie} from \"../../Cookie/AuthWithCookie\";\r\n\r\n\r\n// пропускает на нужную страницу только если пользователь авторизован\r\n// иначе редиректит на страницу авторизации\r\nconst withAuthRedirect = (Component) => {\r\n\treturn (props) => {\r\n\t\tconst userId = useSelector(selectUserId);\r\n\t\tconst token = useSelector(selectToken);\r\n\t\tconst dispatch = useDispatch();\r\n\t\tconst location = useLocation().pathname.split('/')[1]; // берём адрес url\r\n\r\n\t\t// проверка, что токен не был отозван\r\n\t\tif(getTokenFromCookie() !== token) {\r\n\t\t\tdispatch(tryLogOutAsync()); // если отозван, то на всякий случай диспатчим logout\r\n\t\t\treturn <Navigate to={\"/login\"}/> // редирект на страницу авторизации\r\n\t\t}\r\n\r\n\t\t// если токен есть, а идентификатора пользователя нет, значит надо попробовать получить информацию о пользователе по токену (это происходит внутри отрендеренного компонента)\r\n\t\tif (token && !userId) {\r\n\t\t\treturn <LoadingPage/>\r\n\t\t}\r\n\r\n\t\t// чтобы избежать зацикленности при попадании на страницу логина необходимо дополнительное условие\r\n\t\t// если пользователь хочет попасть на страничку авторизации и ещё не авторизован, то пропускаем его\r\n\t\t// если он уже авторизован, то редиректим на главную страницу\r\n\t\tif (location === \"login\") {\r\n\t\t\tif (userId)\r\n\t\t\t\treturn <Navigate to={\"/\"}/>\r\n\t\t\telse\r\n\t\t\t\treturn <Component {...props}/>\r\n\t\t}\r\n\r\n\t\t// если авторизация пройдена, то рендерится нужный компонент, иначе редирект на страницу авторизации\r\n\t\tif (userId)\r\n\t\t\treturn <Component {...props}/>\r\n\t\treturn <Navigate to={\"/login\"}/>\r\n\t}\r\n}\r\n\r\nexport default withAuthRedirect;","import React from \"react\";\r\nimport {Button, Checkbox, Form, Input} from \"antd\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectAuthError, selectIsAuthing, setAuthError, tryLogInAsync} from \"../../Redux/AuthReducer\";\r\nimport withAuthRedirect from \"../HOC/withAuthRedirect\";\r\n\r\nconst LoginWithRedux = () => {\r\n\r\n\t// const login = useSelector(selectLogin);\r\n\t// const userId = useSelector(selectUserId);\r\n\tconst isAuthing = useSelector(selectIsAuthing);\r\n\tconst authError = useSelector(selectAuthError);\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst onFinish = async (values) => {\r\n\t\tdispatch(tryLogInAsync({login: values.login, password: values.password}));\r\n\t};\r\n\tconst onFinishFailed = (errorInfo) => {\r\n\t\tdispatch(setAuthError(errorInfo.errorFields[0].errors[0]))\r\n\t};\r\n\tconst onFieldsChange = () => {\r\n\t\tdispatch(setAuthError(null))\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<div style={{\r\n\t\t\tdisplay: \"flex\",\r\n\t\t\theight: \"100%\",\r\n\t\t\tminHeight: \"100%\",\r\n\t\t\tflexGrow: 1,\r\n\t\t\twidth: \"100%\",\r\n\t\t\tmargin: \"auto\",\r\n\t\t\t// verticalAlign: \"center\",\r\n\t\t\t// alignSelf: \"center\"\r\n\t\t\t// border: \"solid indigo 3px\"\r\n\t\t}}>\r\n\t\t\t<Form\r\n\t\t\t\tlabelCol={{\r\n\t\t\t\t\tspan: 6\r\n\t\t\t\t}}\r\n\t\t\t\twrapperCol={{\r\n\t\t\t\t\tspan: 16\r\n\t\t\t\t}}\r\n\t\t\t\tonFinish={onFinish}\r\n\t\t\t\tonFinishFailed={onFinishFailed}\r\n\t\t\t\tonFieldsChange={onFieldsChange}\r\n\t\t\t\trequiredMark={false}\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tverticalAlign: \"center\",\r\n\t\t\t\t\tmarginBlock: \"auto\",\r\n\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\tmaxWidth: \"500px\",\r\n\t\t\t\t\tmarginInline: \"auto\",\r\n\t\t\t\t\t// border: \"solid violet 3px\"\r\n\t\t\t\t}}>\r\n\t\t\t\t<Form.Item\r\n\t\t\t\t\tlabel=\"Логин\"\r\n\t\t\t\t\tname=\"login\"\r\n\t\t\t\t\trules={[\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\trequired: true,\r\n\t\t\t\t\t\t\tmessage: 'Поле логин обязательно',\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]}>\r\n\t\t\t\t\t<Input/>\r\n\t\t\t\t</Form.Item>\r\n\t\t\t\t<Form.Item\r\n\t\t\t\t\tlabel=\"Пароль\"\r\n\t\t\t\t\tname=\"password\"\r\n\t\t\t\t\trules={[\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\trequired: true,\r\n\t\t\t\t\t\t\tmessage: 'Поле пароль обязательно',\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t]}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Input.Password/>\r\n\t\t\t\t</Form.Item>\r\n\t\t\t\t<Form.Item\r\n\t\t\t\t\tname=\"remember\"\r\n\t\t\t\t\tvaluePropName=\"checked\"\r\n\t\t\t\t\twrapperCol={{\r\n\t\t\t\t\t\tspan: 0,\r\n\t\t\t\t\t\toffset: 6\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Checkbox>запомнить меня</Checkbox>\r\n\t\t\t\t</Form.Item>\r\n\t\t\t\t<Form.Item\r\n\t\t\t\t\twrapperCol={{offset: 6}}\r\n\t\t\t\t\tvalidateStatus={authError ? \"error\" : \"success\"}\r\n\t\t\t\t\thelp={authError}>\r\n\t\t\t\t\t<Button type=\"primary\" htmlType=\"submit\" loading={isAuthing}>\r\n\t\t\t\t\t\tВойти\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Form.Item>\r\n\t\t\t</Form>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default withAuthRedirect(LoginWithRedux);"],"names":["userId","useSelector","selectUserId","token","selectToken","dispatch","useDispatch","getInfoFromTokenAsync","className","styles","tip","size","Component","props","location","useLocation","pathname","split","getTokenFromCookie","tryLogOutAsync","to","withAuthRedirect","isAuthing","selectIsAuthing","authError","selectAuthError","onFinish","values","tryLogInAsync","login","password","style","display","height","minHeight","flexGrow","width","margin","labelCol","span","wrapperCol","onFinishFailed","errorInfo","setAuthError","errorFields","errors","onFieldsChange","requiredMark","verticalAlign","marginBlock","maxWidth","marginInline","label","name","rules","required","message","valuePropName","offset","validateStatus","help","type","htmlType","loading"],"sourceRoot":""}